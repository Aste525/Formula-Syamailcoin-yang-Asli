import time
import random
import secrets
import threading
from typing import List, Dict, Optional
import socket
import json

# Core Constants
BLOCK_REWARD = 941
MAX_NONCE = 941_000
INITIAL_SUPPLY = 9_470_000
NETWORK_PORTS = (8000, 8999)
MAGIC_NUMBER = 941

class AST399Encryption:
    """Advanced Security Technology 399 - Custom encryption for SAI-15"""
    def __init__(self):
        self.magic = MAGIC_NUMBER
        self.security_key = secrets.token_bytes(399)
        
    def generate_hash(self, data: str) -> str:
        """Generate secure hash using AST399 algorithm"""
        combined_data = f"{data}{self.security_key.hex()}"
        return secrets.token_hex(32)

class SAI15Block:
    """Represents a block in the SAI-15 blockchain"""
    def __init__(self, previous_hash: str, transactions: List[Dict], timestamp: Optional[float] = None):
        self.version = "1.0"
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = timestamp or time.time()
        self.nonce = random.randint(0, MAX_NONCE)
        self.hash = self.calculate_block_hash()
        
    def calculate_block_hash(self) -> str:
        """Calculate the cryptographic hash of the block"""
        block_data = (
            f"{self.version}"
            f"{self.previous_hash}"
            f"{self.transactions}"
            f"{self.timestamp}"
            f"{self.nonce}"
        )
        return AST399Encryption().generate_hash(block_data)

class SAI15Chain:
    """Main blockchain implementation for SAI-15"""
    def __init__(self):
        self.chain: List[SAI15Block] = []
        self.pending_transactions: List[Dict] = []
        self.encryption = AST399Encryption()
        self.thread_lock = threading.Lock()
        self.current_supply = 0
        
        # Initialize blockchain with genesis block
        self.initialize_genesis_block()

    def initialize_genesis_block(self):
        """Create and add the genesis block"""
        genesis_block = SAI15Block("0", [
            {
                "type": "genesis",
                "initial_supply": INITIAL_SUPPLY,
                "timestamp": time.time(),
                "message": "SAI-15 Genesis Block"
            }
        ])
        self.chain.append(genesis_block)
        self.current_supply = INITIAL_SUPPLY

    def mine_block(self, miner_address: str) -> bool:
        """Mine a new block and add it to the chain"""
        with self.thread_lock:
            # Create mining reward transaction
            reward_transaction = {
                "type": "mining_reward",
                "recipient": miner_address,
                "amount": BLOCK_REWARD,
                "timestamp": time.time()
            }
            
            # Prepare block transactions
            block_transactions = self.pending_transactions + [reward_transaction]
            
            # Create and mine new block
            new_block = SAI15Block(
                previous_hash=self.chain[-1].hash,
                transactions=block_transactions
            )
            
            # Mining process with random nonce
            new_block.nonce = random.randint(0, MAX_NONCE)
            new_block.hash = new_block.calculate_block_hash()
            
            # Validate block hash (simplified difficulty check)
            if int(new_block.hash[:4], 16) < 0x1000:
                self.chain.append(new_block)
                self.current_supply += BLOCK_REWARD
                self.pending_transactions = []
                return True
            return False

    def add_transaction(self, sender: str, recipient: str, amount: float) -> bool:
        """Add a new transaction to pending transactions"""
        if self.get_wallet_balance(sender) < amount:
            return False
            
        transaction = {
            "sender": sender,
            "recipient": recipient,
            "amount": amount,
            "timestamp": time.time(),
            "signature": self.encryption.generate_hash(f"{sender}{recipient}{amount}{time.time()}")
        }
        
        self.pending_transactions.append(transaction)
        return True

    def get_wallet_balance(self, address: str) -> float:
        """Calculate wallet balance from blockchain history"""
        balance = 0
        
        for block in self.chain:
            for transaction in block.transactions:
                if transaction.get("recipient") == address:
                    balance += transaction.get("amount", 0)
                if transaction.get("sender") == address:
                    balance -= transaction.get("amount", 0)
                    
        return balance

    def verify_blockchain(self) -> bool:
        """Verify the integrity of the entire blockchain"""
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i-1]
            
            # Verify block hash
            if current_block.hash != current_block.calculate_block_hash():
                return False
                
            # Verify chain continuity
            if current_block.previous_hash != previous_block.hash:
                return False
                
        return True

class SAI15Node:
    """Network node implementation for SAI-15"""
    def __init__(self, node_id: str, port: int):
        self.node_id = node_id
        self.port = port
        self.peers: Dict[str, str] = {}
        self.blockchain = SAI15Chain()
        self.transaction_pool: List[Dict] = []
        
    def start_node(self):
        """Initialize and start the blockchain node"""
        self.server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server.bind(('0.0.0.0', self.port))
        self.server.listen(10)
        
        # Start network threads
        threading.Thread(target=self.listen_for_peers, daemon=True).start()
        threading.Thread(target=self.start_mining, daemon=True).start()

    def listen_for_peers(self):
        """Listen for incoming peer connections"""
        while True:
            connection, address = self.server.accept()
            threading.Thread(target=self.handle_peer_connection, 
                           args=(connection, address)).start()

    def handle_peer_connection(self, connection: socket.socket, address: tuple):
        """Handle incoming peer connection and messages"""
        try:
            while True:
                data = connection.recv(4096)
                if not data:
                    break
                    
                message = json.loads(data.decode())
                
                # Handle different message types
                if message["type"] == "new_transaction":
                    self.blockchain.add_transaction(
                        message["sender"],
                        message["recipient"],
                        message["amount"]
                    )
                elif message["type"] == "new_block":
                    # Validate and add new block
                    pass
                
        except Exception as e:
            print(f"Error handling peer connection: {e}")
        finally:
            connection.close()
            
    def start_mining(self):
        """Start the mining process"""
        while True:
            if self.blockchain.mine_block(self.node_id):
                print(f"Node {self.node_id} successfully mined a block!")
            time.sleep(1)  # Mining interval

if __name__ == "__main__":
    # Create and start a new node
    node_port = random.randint(NETWORK_PORTS[0], NETWORK_PORTS[1])
    node = SAI15Node(f"Node_{node_port}", node_port)
    
    print(f"Starting SAI-15 node on port {node_port}")
    node.start_node()
    
    try:
        # Keep main thread alive
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nShutting down node...")
        sys.exit(0)
