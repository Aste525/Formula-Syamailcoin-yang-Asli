import time
import random
import math
import secrets
import threading

MAX_SUPPLY = 9_470_000
MAGIC_NUMBER = 941
ALLOCATION_AMOUNT = 7_150_000
POET_SLEEP_TIME = 114

class AST399:
    def __init__(self, bet_factor, kelly_criterion):
        self.BET_FACTOR = bet_factor
        self.KELLY_CRITERION = kelly_criterion
        self.X_FACTOR = secrets.randbelow(1001) / 1000

    def hash(self, data):
        key = self.generate_key()
        hashed = self.encrypt(data.encode(), key)
        return hashed.hex()[:64]

    def generate_key(self):
        return secrets.token_bytes(399)

    def encrypt(self, data, key):
        if len(key) != 399:
            raise ValueError("Key must be exactly 399 bytes")

        ciphertext = bytearray()
        for i, byte in enumerate(data):
            key_byte = key[i % 399]
            bet_adjustment = int(self.BET_FACTOR * self.KELLY_CRITERION * 255) & 0xFF
            x_adjustment = int(self.X_FACTOR * 255) & 0xFF
            encrypted_byte = (byte + key_byte + bet_adjustment + x_adjustment) % 256
            ciphertext.append(encrypted_byte)

        return bytes(ciphertext)

ast399 = AST399(bet_factor=0.05, kelly_criterion=0.1)

def create_wallet_address(base_string):
    return ast399.hash(base_string)[:40]

class SyamailcoinBlock:
    def __init__(self, previous_hash, transactions):
        self.previous_hash = previous_hash
        self.transactions = transactions
        self.timestamp = time.time()
        self.nonce = random.randint(0, 941_000)
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = f"{self.previous_hash}{self.transactions}{self.timestamp}{self.nonce}"
        return ast399.hash(block_string)

class SyamailcoinBlockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.pending_transactions = []
        self.syamailcoin_wallet_address_1 = create_wallet_address("^S⸷ASTE")
        self.syamailcoin_wallet_address_2 = create_wallet_address("^S⸶DAN")
        self.current_supply = 0
        self.lock = threading.Lock()

    def create_genesis_block(self):
        return SyamailcoinBlock("0", [])

    def get_latest_block(self):
        return self.chain[-1]

    def allocate_initial_funds(self):
        amount_per_address = ALLOCATION_AMOUNT / 2
        self.create_transaction("Genesis", self.syamailcoin_wallet_address_1, amount_per_address, "50% allocation to ^S⸷ASTE")
        self.create_transaction("Genesis", self.syamailcoin_wallet_address_2, amount_per_address, "50% allocation to ^S⸶DAN")

    def mine_pending_transactions(self, miner_address):
        with self.lock:
            block = SyamailcoinBlock(self.get_latest_block().hash, self.pending_transactions)
            self.chain.append(block)
            reward = self.calculate_mining_reward()
            self.create_transaction("System", miner_address, reward, "Mining Reward")
            self.pending_transactions = []

    def create_transaction(self, sender, recipient, amount, description):
        if sender != "Genesis" and sender != "System":
            if self.get_balance(sender) < amount:
                print(f"Error: Insufficient funds for {sender}")
                return
        transaction = {
            "sender": sender, 
            "recipient": recipient, 
            "amount": amount, 
            "description": description, 
            "timestamp": time.time()
        }
        signature = ast399.hash(str(transaction))
        transaction["signature"] = signature
        self.pending_transactions.append(transaction)
        self.current_supply += amount

    def get_balance(self, address):
        balance = 0
        for block in self.chain:
            for transaction in block.transactions:
                if transaction['sender'] == address:
                    balance -= transaction['amount']
                if transaction['recipient'] == address:
                    balance += transaction['amount']
        return balance

    def calculate_mining_reward(self):
        s = self.current_supply / MAX_SUPPLY * MAGIC_NUMBER
        if s >= MAGIC_NUMBER:
            return 0
        return MAX_SUPPLY * (1 - (s/MAGIC_NUMBER)**2) - self.current_supply

    def get_remaining_supply(self):
        return MAX_SUPPLY - self.current_supply

    def calculate_s_value(self):
        return math.sqrt(1 - self.current_supply/MAX_SUPPLY) * MAGIC_NUMBER

def poet_consensus(blockchain, miner_address):
    while True:
        sleep_time = random.randint(1, POET_SLEEP_TIME)
        time.sleep(sleep_time)
        blockchain.mine_pending_transactions(miner_address)
        print(f"Miner {miner_address} mined a block after {sleep_time} seconds")

def main():
    blockchain = SyamailcoinBlockchain()

    blockchain.allocate_initial_funds()

    # Start PoET consensus for both miners
    threading.Thread(target=poet_consensus, args=(blockchain, blockchain.syamailcoin_wallet_address_1)).start()
    threading.Thread(target=poet_consensus, args=(blockchain, blockchain.syamailcoin_wallet_address_2)).start()

    # Simulate some transactions and print balances
    for _ in range(7):
        time.sleep(7)  # Wait for some blocks to be mined
        print("\nCurrent state:")
        print(f"Wallet Address 1 (^S⸷ASTE) balance: {blockchain.get_balance(blockchain.syamailcoin_wallet_address_1)}")
        print(f"Wallet Address 2 (^S⸶DAN) balance: {blockchain.get_balance(blockchain.syamailcoin_wallet_address_2)}")
        print(f"Current Supply: {blockchain.current_supply}")
        print(f"Remaining Supply: {blockchain.get_remaining_supply()}")
        print(f"Current S value: {blockchain.calculate_s_value()}")

        # Create a random transaction
        sender = random.choice([blockchain.syamailcoin_wallet_address_1, blockchain.syamailcoin_wallet_address_2])
        recipient = blockchain.syamailcoin_wallet_address_1 if sender == blockchain.syamailcoin_wallet_address_2 else blockchain.syamailcoin_wallet_address_2
        amount = random.randint(1, 1000)
        blockchain.create_transaction(sender, recipient, amount, "Random transaction")

if __name__ == "__main__":
    main()
